# Generated by 'django-admin startproject' using Django 5.0.7.
import os
from pathlib import Path

import rest_framework.authentication
from dotenv.main import load_dotenv

load_dotenv()

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")

DEBUG = "True" == os.environ.get("DJANGO_DEBUG", True)

ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS").split(",")
CSRF_TRUSTED_ORIGINS = os.environ.get("CSRF_TRUSTED_ORIGINS").split(",")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # DRF
    "rest_framework",
    "rest_framework.authtoken",
    # Celery
    "django_celery_beat",
    "django_celery_results",
    "corsheaders",
    # App
    "apps.my_auth",
    "apps.for_page",
    "apps.device",
    "apps.frontend",  # django template
    # dev
    "rest_framework_swagger",
    "debug_toolbar",
    "drf_yasg",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# Database
if DEBUG:
    print("sqlite")
    if not os.path.exists(BASE_DIR.parent / "db"):
        os.makedirs(BASE_DIR.parent / "db")
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR.parent / "db/db.sqlite3",
        }
    }
else:
    print("postgresql")
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.environ.get("POSTGRES_DB_NAME"),
            "USER": os.environ.get("POSTGRES_DB_USER"),
            "PASSWORD": os.environ.get("POSTGRES_DB_USER_PASSWORD"),
            "HOST": os.environ.get("POSTGRES_HOST"),
            "PORT": os.environ.get("POSTGRES_PORT"),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

if not os.path.exists(BASE_DIR / "static"):
    os.makedirs(BASE_DIR / "static")
STATIC_ROOT = os.path.join(BASE_DIR, "static/")
STATIC_URL = "/static/"

if not os.path.exists(BASE_DIR / "media"):
    os.makedirs(BASE_DIR / "media")
MEDIA_ROOT = os.path.join(BASE_DIR, "media/")
MEDIA_URL = "/media/"

if not os.path.exists(BASE_DIR.parent / "files"):
    os.makedirs(BASE_DIR.parent / "files")
FILE_UPLOAD_DIR = os.path.join(BASE_DIR.parent, "files/")

CORS_ORIGIN_WHITELIST = [
    "http://127.0.0.1:3000",
    "http://localhost:3000",
    "https://inkov.online",
    "https://dev-test.inkov.online",
]

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": os.environ.get("REDIS_URL"),
    }
}

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ]
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file": {
            "class": "logging.FileHandler",
            "filename": BASE_DIR.parent / "log/django_info.log",
        },
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "DEBUG",
    },
    "loggers": {
        "django": {
            "handlers": ["file"],
            "level": "INFO",
            "propagate": True,
        },
    },
}

LOGIN_REDIRECT_URL = "frontend:home"
LOGOUT_REDIRECT_URL = "frontend:login"
LOGIN_URL = "frontend:login"

# celery setting.
CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL")
CELERY_RESULT_BACKEND = os.environ.get("CELERY_RESULT_BACKEND")
CELERY_CACHE_BACKEND = "default"
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_TIMEZONE = "UTC"
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60

TIME_DDOS_FOR_REQUEST = 1
# KAFKA_URL = os.environ.get("KAFKA_URL")

INTERNAL_IPS = [
    "localhost",
    "127.0.0.1",
]

# Heades table for frontend
HEADERS_ADDRESS = {
    "id": "№",
    "customer": "Абонент",
    "address": "Адрес",
    "itp": "ИТП",
    "tso": "ТCO",
    "service_organization": "ОО",
}
HEADERS_DEVICE = {
    "id": "№ п/п",
    "installation_point": "Место установки",
    "registry_number": "№ в реестре",
    "device_type": "Тип",
    "factory_number": "Зав. №",
    "verification_date": "Дата поверки",
    "verifications.valid_date": "Поверка до",
    "notes": "Примечание",
}
HEADERS_VERIFICATION = {
    "id": "№ п/п",
    "organization": "Поверитель",
    "registry_number": "№ в реестре",
    "device_type": "Тип",
    "device_mod": "Модификация",
    "factory_number": "Зав. №",
    "verification_date": "Дата поверки",
    "valid_date": "Поверка до",
    "is_actual": "Актуальна",
    "is_delete": "Будет удалена",
}
CONVERT_VERIF_FIELDS = {
    "mi_mititle": "mi.mititle",
    "mit_mitnumber": "mi.mitnumber",
    "mi_mitype": "mi.mitype",
    "mi_modification": "mi.modification",
    "mi_number": "mi.number",
    "org_title": "org_title",
    "verification_date": "verification_date",
    "valid_date": "valid_date"
}

FIELDNAMES_FILE_MU = [
    'Наименование абонента', 'Город', 'Наименование улицы', 'Тип улицы', '№ дома', 'Корп', 'Лит', 'ТЦ', 'Труба', 'Тип', 'Ду', 'Номер', 'Дата', 'МПИ', 'ТСО', '№ Тотэм'
]
FIELDNAMES_FILE_TYPE = ['Тип', 'Номер в госреестре']
