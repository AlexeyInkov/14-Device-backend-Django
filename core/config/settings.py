# Generated by 'django-admin startproject' using Django 5.0.7.
import logging
import os
import sys
from pathlib import Path

import rest_framework.authentication
from django.http import HttpRequest
from dotenv.main import load_dotenv

logger = logging.getLogger(__name__)

load_dotenv()

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")

IS_RUNNING_TESTS = "test" in sys.argv

if IS_RUNNING_TESTS:
    DEBUG = False
else:
    DEBUG = "True" == os.environ.get("DJANGO_DEBUG", True)

print(f"{DEBUG=}")

ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS").split(",")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # DRF
    "rest_framework",
    "rest_framework.authtoken",
    # Celery
    "django_celery_beat",
    "django_celery_results",
    "cachalot",
    "django_htmx",
    # Apps
    "apps.my_auth.apps.MyAuthConfig",
    "apps.device.apps.DeviceConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# Database

print("sqlite")
if not os.path.exists(BASE_DIR.parent.parent / "dc_db"):
    os.makedirs(BASE_DIR.parent.parent / "dc_db")
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR.parent.parent / "dc_db/db.sqlite3",
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

if not os.path.exists(BASE_DIR / "static"):
    os.makedirs(BASE_DIR / "static")
STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR / "static"]

if not os.path.exists(BASE_DIR / "staticfiles"):
    os.makedirs(BASE_DIR / "staticfiles")
STATICFILES_DIRS = [BASE_DIR / "staticfiles"]

if not os.path.exists(BASE_DIR / "media"):
    os.makedirs(BASE_DIR / "media")
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "media/"

if not os.path.exists(BASE_DIR.parent / "files"):
    os.makedirs(BASE_DIR.parent / "files")
FILE_UPLOAD_DIR = os.path.join(BASE_DIR.parent, "files/")

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

if not DEBUG:
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": os.environ.get("REDIS_URL"),
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
            },
        }
    }

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ]
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "django.server": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file": {
            "class": "logging.FileHandler",
            "level": "WARNING",
            "filename": BASE_DIR.parent / "log/django_info.log",
            "formatter": "django.server",
        },
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "django.server",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "DEBUG",
    },
    "loggers": {
        "django": {
            "handlers": ["file", "console"],
            "level": "INFO",
            "propagate": True,
        },
        "django.db": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}

LOGIN_REDIRECT_URL = "device:home"
LOGOUT_REDIRECT_URL = "my_auth:login"
LOGIN_URL = "my_auth:login"

# celery setting.
CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL")
CELERY_RESULT_BACKEND = os.environ.get("CELERY_RESULT_BACKEND")
CELERY_CACHE_BACKEND = "default"
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_TIMEZONE = "UTC"
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60

# Development options


INTERNAL_IPS = ("127.0.0.1", "localhost")


def show_toolbar(request: HttpRequest) -> bool:
    if DEBUG and not IS_RUNNING_TESTS:
        if request.META.get("REMOTE_ADDR") not in INTERNAL_IPS:
            logger.error(
                "Local address is not in INTERNAL_IPs",
                error={
                    "remote_addr": request.META.get("REMOTE_ADDR"),
                    "INTERNAL_IPs": INTERNAL_IPS,
                },
            )
        return True


if DEBUG and not IS_RUNNING_TESTS:
    # Swagger
    INSTALLED_APPS += [
        "rest_framework_swagger",
        "drf_yasg",
    ]
    # Debug toolbar
    INSTALLED_APPS += [
        "debug_toolbar",
    ]
    MIDDLEWARE += [
        "debug_toolbar.middleware.DebugToolbarMiddleware",
    ]

    DEBUG_TOOLBAR_PANELS = (
        # "debug_toolbar.panels.versions.VersionsPanel",
        "debug_toolbar.panels.history.HistoryPanel",
        "debug_toolbar.panels.timer.TimerPanel",
        "debug_toolbar.panels.settings.SettingsPanel",
        "debug_toolbar.panels.headers.HeadersPanel",
        "debug_toolbar.panels.request.RequestPanel",
        "debug_toolbar.panels.sql.SQLPanel",
        "debug_toolbar.panels.staticfiles.StaticFilesPanel",
        "debug_toolbar.panels.templates.TemplatesPanel",
        "debug_toolbar.panels.alerts.AlertsPanel",
        "debug_toolbar.panels.cache.CachePanel",
        "debug_toolbar.panels.signals.SignalsPanel",
        # "debug_toolbar.panels.redirects.RedirectsPanel",
        # "debug_toolbar.panels.profiling.ProfilingPanel",
        "cachalot.panels.CachalotPanel",  # Cachalot
    )

    DEBUG_TOOLBAR_CONFIG = {
        "SHOW_TOOLBAR_CALLBACK": show_toolbar,
        # 'INSERT_BEFORE': '<head>',
        "UPDATE_ON_FETCH": True,
        "SQL_WARNING_THRESHOLD": 20,
        "ROOT_TAG_EXTRA_ATTRS": "hx-preserve",
        # 'EXCLUDE_URLS': ('/admin',),  # не работает, но в разработке есть...
        "INTERCEPT_REDIRECTS": False,
    }

    # Cachalot
    CACHALOT_ENABLED = False


# Пауза между запросами для fgis.arshin
TIME_DDOS_FOR_REQUEST = 1

# Heades table for frontend
HEADERS_ADDRESS = {
    "id": "№",
    "customer": "Абонент",
    "address": "Адрес",
    "itp": "ИТП",
    "tso": "ТCO",
    "service_organization": "ОО",
}
HEADERS_DEVICE = {
    "id": "№ п/п",
    "installation_point": "Место установки",
    "registry_number": "№ в реестре",
    "type": "Тип",
    "modification": "Модификация",
    "factory_number": "Зав. №",
    "valid_date": "Поверка до",
    "notes": "Примечание",
}
HEADERS_VERIFICATION = {
    "org_title": "Поверитель",
    "mit_number": "№ в реестре",
    "mit_notation": "Тип",
    "mi_modification": "Модификация",
    "mi_number": "Зав. №",
    "verification_date": "Дата поверки",
    "valid_date": "Поверка до",
    "is_actual": "Актуальна",
}
HEADERS_VERIFICATION_UPDATE = HEADERS_VERIFICATION.copy()
HEADERS_VERIFICATION_UPDATE.update(
    {
        "is_published": "Показывать",
        "empty": "",
        "delete": "Удалить",
    }
)
# File field names for csv
FIELDNAMES_FILE_MU = [
    "Наименование абонента",
    "Город",
    "Наименование улицы",
    "Тип улицы",
    "№ дома",
    "Корп",
    "Лит",
    "ТЦ",
    "Труба",
    "Тип",
    "Ду",
    "Номер",
    "Дата",
    "МПИ",
    "ТСО",
    "№ Тотэм",
]
FIELDNAMES_FILE_TYPE = ["Тип", "Номер в госреестре", "Наименование СИ"]
