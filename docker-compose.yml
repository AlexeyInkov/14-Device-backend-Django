services:
#  tg_bot:
#    container_name: tg_bot
#    build:
#      context: .
#      dockerfile: ./tg_bot/dockerfile
#    restart: unless-stopped
#    env_file:
#      - env/.env_docker
#    volumes:
#      - ./tg_bot:/tg_bot

#  nginx:
#    container_name: nginx
#    image: nginx:stable-alpine
#    restart: unless-stopped
#    env_file:
#      - .env_docker
#    ports:
#      - 80:80
#      - 443:443
#    volumes:
#      - ./etc/nginx:/etc/nginx
#      - ./etc/nginx/templates:/etc/etc/templates:ro
#      - ./etc/letsencrypt:/etc/letsencrypt:ro
#      - ./certbot/data:/var/www/certbot
#    depends_on:
#      - web-app
#    networks:
#      - app-network
#
#  certbot:
#    container_name: certbot
#    env_file:
#      - env/.env_docker
#    build:
#      context: ./certbot
#      dockerfile: Dockerfile
#    command: >-
#      certbot certonly --reinstall --webroot --webroot-path=/var/www/certbot
#      --email ${DOMAIN_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN_URL}
#    volumes:
#      - ./etc/letsencrypt:/etc/letsencrypt
#      - ./certbot/data:/var/www/certbot
#    depends_on:
#      - nginx


  redis:
    container_name: redis
    image: redis:7.4.1-alpine
    restart: unless-stopped
    volumes:
      - ./db-data/redis:/data
    ports:
      - "6379:6379"

  postgres:
    container_name: postgres
    image: postgres:14.8-alpine
    env_file:
      - env/.env_docker
    volumes:
      - ./db-data/postgresql:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 5s
      timeout: 3s
      retries: 3

  web-app:
    container_name: web-app
    build:
      context: .
      dockerfile: ./dockerfiles/docker_django
    restart: unless-stopped
    env_file:
      - env/.env_docker
    volumes:
      - ./core:/core
    ports:
      - 8000:8000
    command: sh -c "python3 manage.py makemigrations && python3 manage.py migrate && python3 manage.py runserver 0.0.0.0:8000"
#    python manage.py migrate && gunicorn -b 0.0.0.0:8000 config.wsgi:application"
#      sh -c "python manage.py migrate && python manage.py loaddata fixtures/20241125.json && python manage.py runserver 0.0.0.0:8000"

    depends_on:
      postgres:
        condition: service_healthy
      redis:

  celery-worker:
    container_name: celery-worker
    build:
      context: .
      dockerfile: ./dockerfiles/docker_django
    restart: unless-stopped
    env_file:
      - env/.env_docker
    volumes:
      - ./core:/core
    command: ['celery', '-A', 'config', 'worker', '-l', 'DEBUG']
    depends_on:
      postgres:
        condition: service_healthy
      redis:
      web-app:

  celery-flower:
    container_name: celery-flower
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./dockerfiles/docker_django
    env_file:
      - env/.env_docker
    ports:
      - 5555:5555
    command: ['celery', '-A', 'config', 'flower', '-l', 'DEBUG', "-P", "gevent"]
    depends_on:
      - celery-worker
#
#  celery-beat:
#    container_name: celery-beat
#    restart: unless-stopped
#    build:
#      context: .
#    env_file:
#      - .env_docker
#    environment:
#      - CELERY_BROKER_URL=redis://redis:6379/0
#      - CELERY_RESULT_BACKEND=redis://redis:6379/0
#    command: ['celery', '-A', 'config', 'beat', '-l', 'DEBUG']
#    depends_on:
#      - postgres
#      - redis
#      - celery-worker
#      - app-network

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    ports:
      - "9080:9080"
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./configurations/promtail-config.yaml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    privileged: true

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./configurations/loki-config.yaml:/etc/loki/local-config.yaml

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configurations/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheusdata:/prometheus

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./configurations/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - grafanadata:/var/lib/grafana

volumes:
  db-data:
  #  pgadmin-data:
  uploads:
  grafanadata:
  prometheusdata:

