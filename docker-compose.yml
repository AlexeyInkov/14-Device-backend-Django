services:
#  nginx:
#    container_name: nginx
#    image: nginx:stable-alpine
#    restart: unless-stopped
#    env_file:
#      - .env
#    ports:
#      - 80:80
#      - 443:443
#    volumes:
#      - ./etc/nginx:/etc/nginx
#      - ./etc/nginx/templates:/etc/etc/templates:ro
#      - ./etc/letsencrypt:/etc/letsencrypt:ro
#      - ./certbot/data:/var/www/certbot
#    depends_on:
#      - web-app
#    networks:
#      - app-network


#  certbot:
#    container_name: certbot
#    env_file:
#      - .env
#    build:
#      context: ./certbot
#      dockerfile: Dockerfile
#    command: >-
#      certbot certonly --reinstall --webroot --webroot-path=/var/www/certbot
#      --email ${DOMAIN_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN_URL}
#    volumes:
#      - ./etc/letsencrypt:/etc/letsencrypt
#      - ./certbot/data:/var/www/certbot
#    depends_on:
#      - nginx

  redis:
    container_name: redis
    image: redis:7.4.1-alpine
    restart: unless-stopped
    ports:
      - 6379:6379
    networks:
      - app-network

  web-app:
    container_name: web-app
    build:
      context: .
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./core:/core
    ports:
      - 8000:8000
    command: >
      sh -c "python manage.py migrate && python manage.py loaddata fixtures/20241125.json && python manage.py runserver 0.0.0.0:8000"
#      sh -c "python manage.py migrate && python manage.py loaddata fixtures/20241125.json && gunicorn -b 0.0.0.0:8000 config.wsgi:application"
    depends_on:
#      - postgres
      - redis
    networks:
      - app-network

  celery-worker:
    container_name: celery-worker
    restart: unless-stopped
    build:
      context: .
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./cats:/app/src/cats
    command: ['celery', '-A', 'config', 'worker', '-l', 'DEBUG', "-P", "gevent"]
    depends_on:
#      - postgres
#      - redis
      - web-app
    networks:
      - app-network

  celery-flower:
    container_name: celery-flower
    restart: unless-stopped
    build:
      context: .
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    ports:
      - 5555:5555
    command: ['celery', '-A', 'config', 'flower', '-l', 'DEBUG']  #, "-P", "gevent"]
    depends_on:
      - celery-worker
    networks:
      - app-network

  celery-beat:
    container_name: celery-beat
    restart: unless-stopped
    build:
      context: .
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./cats:/app/src/cats
    command: ['celery', '-A', 'config', 'beat', '-l', 'DEBUG']
    depends_on:
#      - postgres
#      - redis
      - celery-worker
    networks:
      - app-network
#
#  postgres:
#    container_name: postgres
#    image: postgres:14.8-alpine
#    environment:
#      POSTGRES_DB: ${POSTGRES_DB_NAME}
#      POSTGRES_USER: ${POSTGRES_DB_USER}
#      POSTGRES_PASSWORD: ${POSTGRES_DB_USER_PASSWORD}
##      PGDATA: "/var/lib/postgresql/data/pgdata"
#    volumes:
#      - ../2. Init Database:/docker-entrypoint-initdb.d
##      - pg-data:/var/lib/postgresql/data
#    ports:
#      - "5432:5432"
#    restart: unless-stopped
#    networks:
#      - app-network


##    networks:
#      - net
#
#  pgadmin:
#    container_name: pgadmin_container
#    image: dpage/pgadmin4:8.10
#    environment:
#      PGADMIN_DEFAULT_EMAIL: "alex0982@mail.ru"
#      PGADMIN_DEFAULT_PASSWORD: "pgadminpassword"
#      PGADMIN_CONFIG_SERVER_MODE: "False"
#    volumes:
#      - pgadmin-data:/var/lib/pgadmin
#    ports:
#      - "5050:80"
#    restart: unless-stopped
#    networks:
#      - net
#
##
#volumes:
#  pg-data:
#  pgadmin-data:
networks:
  app-network:
    name: app-network # I specified this line to be able to find my network by its name
    driver: bridge